%% File : DPT_Sfunc_1_C.tlc
%% Created: Sun Mar 30 13:07:10 2003
%%
%% Description: 
%%   Real-Time Workshop wrapper functions interface generated for 
%%   S-function "DPT_Sfunc_1_C.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Real-Time Workshop, see the Target Language Compiler manual
%%   (under Real-Time Workshop) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  DPT_Sfunc_1_C "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile externs
extern void DPT_Sfunc_1_C_Outputs_wrapper(const real_T *u,
                             real_T       *y,
                             const real_T *xC, 
                             const real_T  *param0, const int_T  p_width0, const real_T  *param1, const int_T  p_width1, const real_T  *param2, const int_T  p_width2, const real_T  *param3, const int_T  p_width3, const real_T  *param4, const int_T  p_width4,  const real_T *param5, const int_T p_width5);
  
  
extern void DPT_Sfunc_1_C_Derivatives_wrapper(const real_T *u,
                             const real_T *y, real_T *dx,
                             real_T      *xC, 
                             const real_T  *param0, const int_T  p_width0,const real_T  *param1, const int_T  p_width1,const real_T  *param2, const int_T  p_width2,const real_T  *param3, const int_T  p_width3,const real_T  *param4, const int_T  p_width4, const real_T  *param5, const int_T  p_width5);
  
  %closefile externs
  %<LibCacheExtern(externs)>
   %assign result = LibAddToModelSources("DPT_Sfunc_1_C_wrapper")
  %assign result = LibAddToModelSources("//my_lib.lib")

%endfunction

%% InitializeConditions =========================================================
%%
%function InitializeConditions(block, system) Output
 /* %<Type> Block: %<Name> */
 
 { 
  real_T *xC   = ssGetContStates(%<tSimStruct>);
  
    xC[0] =  0;
    xC[1] =  0;
 }
%endfunction

%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
   /* S-Function "DPT_Sfunc_1_C_wrapper" Block: %<Name> */

  %assign pu = LibBlockInputSignalAddr(0, "", "", 0)
  %assign py = LibBlockOutputSignalAddr(0, "", "", 0)
  
  %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]
  %assign pp6 = LibBlockParameterAddr(P6, "", "", 0)
  %assign nelements6 = LibBlockParameterSize(P6)
  %assign param_width6 = nelements6[0] * nelements6[1]
  

 { 
    real_T *pxc = ssGetContStates(%<tSimStruct>);
    DPT_Sfunc_1_C_Outputs_wrapper(%<pu>, %<py>, pxc, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>, %<pp5>, %<param_width5>, %<pp6>, %<param_width6>);
  }  
  %%
%endfunction



%% Function: Derivatives ======================================================
%% Abstract:
%%      Derivatives
%%
%function Derivatives(block, system) Output
   /* S-Function "DPT_Sfunc_1_C_wrapper" Block: %<Name> */  

  %assign pu = LibBlockInputSignalAddr(0, "", "", 0)
  %assign py = LibBlockOutputSignalAddr(0, "", "", 0)
  
  %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]
  %assign pp6 = LibBlockParameterAddr(P6, "", "", 0)
  %assign nelements6 = LibBlockParameterSize(P6)
  %assign param_width6 = nelements6[0] * nelements6[1]
  

 { 
    real_T *pxc = ssGetContStates(%<tSimStruct>);
    real_T *dx  = ssGetdX(%<tSimStruct>);
    DPT_Sfunc_1_C_Derivatives_wrapper(%<pu>, %<py>, dx, pxc, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>, %<pp5>, %<param_width5>, %<pp6>, %<param_width6>);
  }
  %%
%endfunction 
%% [EOF] DPT_Sfunc_1_C.tlc








